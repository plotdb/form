// Generated by LiveScript 1.6.0
var form;
form = {};
form.op = function(opt){
  opt == null && (opt = {});
  this.id = opt.id;
  this.name = opt.name;
  this.config = opt.config;
  this.func = opt.func;
  return this;
};
form.op.prototype = import$(Object.create(Object.prototype), {
  verify: function(val, cfg){
    var ret;
    cfg == null && (cfg = {});
    if ((ret = this.func(val, cfg)) instanceof Promise) {
      return ret;
    } else {
      return Promise.resolve(!!ret);
    }
  },
  getConfigDefault: function(){
    var cfg, k, ref$, v;
    cfg = {};
    for (k in ref$ = this.config) {
      v = ref$[k];
      cfg[k] = v['default'];
    }
    return cfg;
  }
});
form.opset = function(opt){
  var ops, k, v, this$ = this;
  opt == null && (opt = {});
  this.name = opt.name;
  this.id = opt.id;
  this.ops = {};
  ops = Array.isArray(opt.ops)
    ? opt.ops.map(function(it){
      return {
        v: it,
        k: it.id
      };
    })
    : (function(){
      var ref$, results$ = [];
      for (k in ref$ = opt.ops) {
        v = ref$[k];
        results$.push({
          k: k,
          v: v
        });
      }
      return results$;
    }());
  ops.map(function(arg$){
    var k, v, ref$, ref1$, results$ = [];
    k = arg$.k, v = arg$.v;
    this$.ops[k] = v instanceof form.op
      ? v
      : k
        ? new form.op((ref$ = typeof v === 'function' ? {
          func: v
        } : v, ref$.id = k, ref$))
        : (function(){
          throw new Error('invalid op when initializing opset.');
        }());
    for (k in ref$ = opt.ops) {
      v = ref$[k];
      results$.push(this$.ops[k] = new form.op((ref1$ = typeof v === 'function' ? {
        func: v
      } : v, ref1$.name = k, ref1$.id = k, ref1$)));
    }
    return results$;
  });
  this.defaultOp = this.ops[opt.defaultOp]
    ? opt.defaultOp
    : (function(){
      var ref$, results$ = [];
      for (k in ref$ = this.ops) {
        v = ref$[k];
        results$.push(k);
      }
      return results$;
    }.call(this))[0];
  return this;
};
form.opset.prototype = import$(Object.create(Object.prototype), {
  getOp: function(id){
    return this.ops[id || this.defaultOp];
  },
  getOps: function(){
    var k, ref$, v, results$ = [];
    for (k in ref$ = this.ops) {
      v = ref$[k];
      results$.push(v);
    }
    return results$;
  }
});
form.opset.register = function(it){
  return (this.list || (this.list = [])).push(it instanceof form.opset
    ? it
    : new form.opset(it));
};
form.opset.get = function(id){
  return (this.list || (this.list = [])).filter(function(it){
    return (it.id || it.name) === id;
  })[0];
};
/**
 * term, for verification of values based on assigned op and config.
 * @constructor
 * @param {boolean} enabled - determine if this term is enabled or not
 * @param {string} opset - id of opset used by this term.
 * @param {string} op - id of op used by this term
 * @param {object} config - additional config for chosen op.
 */
form.term = function(opt){
  opt == null && (opt = {});
  import$((this.enabled = true, this.opset = null, this.op = null, this.config = {}, this), opt);
  this.setOpset(opt.opset, opt.op, opt.config);
  return this;
};
form.term.prototype = import$(Object.create(Object.prototype), {
  toggle: function(it){
    return this.enabled = it != null
      ? it
      : !this.enabled;
  },
  setOpset: function(opset, op, cfg){
    console.log(">", opset.id, opset instanceof form.opset);
    if (typeof opset === 'string') {
      if (!(this.opset = form.opset.get(opset))) {
        throw new Error("no such opset '" + opset + "'");
      }
    } else if (opset instanceof form.opset) {
      console.log('ok!');
      this.opset = opset;
    } else {
      throw new Error("invalid opset");
    }
    return this.setOp(op, cfg);
  },
  setOp: function(id, cfg){
    if (!this.opset) {
      throw new Error("opset not set");
    }
    if (!(this.op = this.opset.getOp(id))) {
      throw new Error("no such op '" + id + "'");
    }
    return this.setConfig(cfg);
  },
  setConfig: function(cfg){
    if (!this.op) {
      throw new Error("op not set");
    }
    return this.config = !cfg ? this.op.getConfigDefault() : cfg;
  },
  verify: function(v){
    if (!this.op) {
      Promis.reject(new Error("op not set"));
    }
    return this.op.verify(v, this.config);
  },
  serialize: function(){
    return {
      enabled: this.enabled,
      opset: this.opset.id,
      op: this.op.id,
      config: this.config
    };
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
