// Generated by LiveScript 1.3.1
(function(){
  var form, slice$ = [].slice;
  form = {};
  form.manager = function(){
    this._fields = [];
    return this;
  };
  form.manager.prototype = import$(Object.create(Object.prototype), {
    add: function(it){
      return this._fields = this._fields.concat(Array.isArray(it)
        ? it
        : [it]);
    },
    fields: function(){
      return this._fields;
    },
    serialize: function(){
      return this._fields.map(function(it){
        return it.serialize();
      });
    },
    value: function(vs){
      var k, v, f, results$ = [];
      if (!vs) {
        return Object.fromEntries(this._fields.map(function(it){
          return [it.data.alias || it.data.key, it.value()];
        }));
      }
      for (k in vs) {
        v = vs[k];
        f = this._fields.filter(fn$)[0];
        if (!f) {
          continue;
        }
        results$.push(f.value(v));
      }
      return results$;
      function fn$(it){
        return it.data.alias === k || it.data.key === k;
      }
    },
    mode: function(m){
      return this._fields.map(function(it){
        return it.setMode(m);
      });
    }
  });
  form.op = function(opt){
    opt == null && (opt = {});
    this.id = opt.id;
    this.name = opt.name;
    this.config = opt.config;
    this.func = opt.func;
    return this;
  };
  form.op.prototype = import$(Object.create(Object.prototype), {
    verify: function(val, cfg){
      var ret;
      cfg == null && (cfg = {});
      if ((ret = this.func(val, cfg)) instanceof Promise) {
        return ret;
      } else {
        return Promise.resolve(!!ret);
      }
    },
    getConfigDefault: function(){
      var cfg, k, ref$, v;
      cfg = {};
      for (k in ref$ = this.config) {
        v = ref$[k];
        cfg[k] = v['default'];
      }
      return cfg;
    }
  });
  form.opset = function(opt){
    var ops, k, v, this$ = this;
    opt == null && (opt = {});
    this.name = opt.name;
    this.id = opt.id;
    this.ops = {};
    ops = Array.isArray(opt.ops)
      ? opt.ops.map(function(it){
        return {
          v: it,
          k: it.id
        };
      })
      : (function(){
        var ref$, results$ = [];
        for (k in ref$ = opt.ops) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }());
    ops.map(function(arg$){
      var k, v, ref$, ref1$, results$ = [];
      k = arg$.k, v = arg$.v;
      this$.ops[k] = v instanceof form.op
        ? v
        : k
          ? new form.op((ref$ = typeof v === 'function' ? {
            func: v
          } : v, ref$.id = k, ref$))
          : (function(){
            throw new Error('invalid op when initializing opset.');
          }());
      for (k in ref$ = opt.ops) {
        v = ref$[k];
        results$.push(this$.ops[k] = new form.op((ref1$ = typeof v === 'function' ? {
          func: v
        } : v, ref1$.name = k, ref1$.id = k, ref1$)));
      }
      return results$;
    });
    this.defaultOp = this.ops[opt.defaultOp]
      ? opt.defaultOp
      : (function(){
        var ref$, results$ = [];
        for (k in ref$ = this.ops) {
          v = ref$[k];
          results$.push(k);
        }
        return results$;
      }.call(this))[0];
    return this;
  };
  form.opset.prototype = import$(Object.create(Object.prototype), {
    getOp: function(id){
      return this.ops[id || this.defaultOp];
    },
    getOps: function(){
      var k, ref$, v, results$ = [];
      for (k in ref$ = this.ops) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }
  });
  form.opset.register = function(it){
    return (this.list || (this.list = [])).push(it instanceof form.opset
      ? it
      : new form.opset(it));
  };
  form.opset.get = function(id){
    return (this.list || (this.list = [])).filter(function(it){
      return (it.id || it.name) === id;
    })[0];
  };
  form.opset['default'] = [
    {
      id: 'string',
      ops: {
        include: {
          func: function(v, c){
            c == null && (c = {});
            return ~("" + (v || '')).indexOf(c.str || '');
          },
          config: {
            str: {
              type: 'text'
            }
          }
        },
        exclude: {
          func: function(v, c){
            c == null && (c = {});
            return !~("" + (v || '')).indexOf(c.str || '');
          },
          config: {
            str: {
              type: 'text'
            }
          }
        },
        email: {
          func: function(v){
            return /^[^@]+@[^@]+$/.exec(v);
          },
          config: {}
        }
      }
    }, {
      id: 'number',
      ops: {
        lte: {
          func: function(v, c){
            c == null && (c = {});
            if (isNaN(v) || isNaN(c.val)) {
              return false;
            } else {
              return +v <= +c.val;
            }
          },
          config: {
            val: {
              type: 'text',
              hint: "number for comparison"
            }
          }
        },
        gte: {
          func: function(v, c){
            c == null && (c = {});
            if (isNaN(v) || isNaN(c.val)) {
              return false;
            } else {
              return +v >= +c.val;
            }
          },
          config: {
            val: {
              type: 'text',
              hint: "number for comparison"
            }
          }
        },
        ne: {
          func: function(v, c){
            c == null && (c = {});
            if (isNaN(v) || isNaN(c.val)) {
              return false;
            } else {
              return +v !== +c.val;
            }
          },
          config: {
            val: {
              type: 'text',
              hint: "number for comparison"
            }
          }
        },
        eq: {
          func: function(v, c){
            c == null && (c = {});
            if (isNaN(v) || isNaN(c.val)) {
              return false;
            } else {
              return +v === +c.val;
            }
          },
          config: {
            val: {
              type: 'text',
              hint: "number for comparison"
            }
          }
        }
      }
    }
  ];
  form.opset['default'].map(function(it){
    return form.opset.register(it);
  });
  /**
   * term, for verification of values based on assigned op and config.
   * @constructor
   * @param {boolean} enabled - determine if this term is enabled or not
   * @param {string} opset - id of opset used by this term.
   * @param {string} op - id of op used by this term
   * @param {object} config - additional config for chosen op.
   */
  form.term = function(opt){
    opt == null && (opt = {});
    import$((this.enabled = true, this.opset = null, this.op = null, this.config = {}, this), opt);
    this.setOpset(opt.opset, opt.op, opt.config);
    return this;
  };
  form.term.prototype = import$(Object.create(Object.prototype), {
    toggle: function(it){
      return this.enabled = it != null
        ? it
        : !this.enabled;
    },
    setOpset: function(opset, op, cfg){
      if (typeof opset === 'string') {
        if (!(this.opset = form.opset.get(opset))) {
          throw new Error("no such opset '" + opset + "'");
        }
      } else if (opset instanceof form.opset) {
        this.opset = opset;
      } else {
        throw new Error("invalid opset");
      }
      return this.setOp(op, cfg);
    },
    setOp: function(id, cfg){
      if (!this.opset) {
        throw new Error("opset not set");
      }
      if (!(this.op = this.opset.getOp(id))) {
        throw new Error("no such op '" + id + "'");
      }
      return this.setConfig(cfg);
    },
    setConfig: function(cfg){
      if (!this.op) {
        throw new Error("op not set");
      }
      return this.config = !cfg ? this.op.getConfigDefault() : cfg;
    },
    verify: function(v){
      if (!this.op) {
        Promis.reject(new Error("op not set"));
      }
      return this.op.verify(v, this.config);
    },
    serialize: function(){
      return {
        enabled: this.enabled,
        opset: this.opset.id,
        op: this.op.id,
        config: this.config
      };
    },
    deserialize: function(v){
      this.toggle(v.enabled);
      return this.setOpset(v.opset, v.op, v.config);
    }
  });
  form.widget = function(opt){
    opt == null && (opt = {});
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.evtHandler = {};
    this.data = {
      config: {},
      key: suuid()
    };
    this._value = null;
    this._empty = true;
    this._mode = opt.mode || 'view';
    this.opsets = opt.opsets || [];
    this.errors = [];
    return this;
  };
  form.widget.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var this$ = this;
      return (Array.isArray(n)
        ? n
        : [n]).map(function(n){
        var ref$;
        return ((ref$ = this$.evtHandler)[n] || (ref$[n] = [])).push(cb);
      });
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    serialize: function(){
      var ret, ref$, ref1$;
      ret = (ref1$ = {}, ref1$.key = (ref$ = this.data).key, ref1$.title = ref$.title, ref1$.desc = ref$.desc, ref1$);
      ret.config = JSON.parse(JSON.stringify(this.data.config || {}));
      ret.term = this.data.term.map(function(it){
        return it.serialize();
      });
      return ret;
    },
    deserialize: function(v){
      var ref$;
      ref$ = this.data;
      ref$.key = v.key;
      ref$.title = v.title;
      ref$.desc = v.desc;
      this.data.config = JSON.parse(JSON.stringify(v.config || {}));
      return this.data.term = v.term.map(function(it){
        return new form.term().deserialize(it);
      });
    },
    mode: function(it){
      if (!(it != null)) {
        return this._mode;
      }
      this.mode = it;
      this.verify();
      return this.render();
    },
    value: function(v, isEmpty, fromSource){
      isEmpty == null && (isEmpty = false);
      fromSource == null && (fromSource = false);
      if (v != null) {
        this._value = v;
        this._empty = isEmpty;
        this.verify();
      }
      if (!source) {
        this.fire('change', this._value);
      }
      return this._value;
    },
    verify: function(){
      var this$ = this;
      if (this._empty && this.data.config.isRequired) {
        this.errors = ["required"];
        return view.render();
      }
      return Promise.all(this.data.term.filter(function(t){
        return t.enabled;
      }).map(function(t){
        return t.verify(this$._value).then(function(v){
          return [t, v];
        });
      })).then(function(it){
        this$.errors = it.filter(function(it){
          return !it[1];
        }).map(function(it){
          return it[0].msg;
        });
        return view.render();
      });
    },
    render: function(){}
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = form;
  } else if (typeof window != 'undefined' && window !== null) {
    window.form = form;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
