// Generated by LiveScript 1.6.0
(function(){
  var bm, cr, c, longAnswer;
  form.manager = bm = new block.manager();
  cr = new block['class']({
    name: "form-block",
    version: "0.0.1",
    code: {
      dom: function(){
        return pug.render("div\n  plug(name=\"content\") empty block\n  hr\n  div(ld-each=\"term\")\n    span(ld=\"delete\") x\n    span &nbsp;\n    span(ld=\"name\")\n  div\n    span(ld=\"add-term\") add term\n    input(ld=\"term-name\")\n  hr\n  div powered by form block");
      },
      style: "",
      script: function(){
        return {
          init: function(arg$){
            var root, pubsub, lc, view;
            root = arg$.root, pubsub = arg$.pubsub;
            this.lc = lc = {
              term: [123]
            };
            return view = new ldView({
              root: root,
              action: {
                click: {
                  "add-term": function(){
                    lc.term.push(view.get('term-name').value || Math.random().toString(36).substring(2));
                    view.render();
                    return pubsub.fire('add-term', lc.term);
                  }
                }
              },
              handler: {
                term: {
                  list: function(){
                    return lc.term;
                  },
                  view: {
                    action: {
                      click: {
                        'delete': function(arg$){
                          var context;
                          context = arg$.context;
                          lc.term.splice(lc.term.indexOf(context), 1);
                          view.render('term');
                          return pubsub.fire('add-term', lc.term);
                        }
                      }
                    },
                    handler: {
                      name: function(arg$){
                        var node, context;
                        node = arg$.node, context = arg$.context;
                        return node.innerText = context;
                      }
                    }
                  }
                }
              }
            });
          }
        };
      }
    }
  });
  c = new block['class']({
    name: "long-answer",
    version: "0.0.1",
    extend: cr,
    code: {
      dom: function(){
        return pug.render("div: div(plug=\"content\")\n  input(ld=\"input\")\n  div(ld=\"warn\") X\n  div(ld=\"pass\") V\n  div(plug=\"test\")");
      },
      style: "",
      script: function(){
        return {
          init: function(arg$){
            var root, parent, pubsub, termEmail, typeString, view, validate, this$ = this;
            root = arg$.root, parent = arg$.parent, pubsub = arg$.pubsub;
            this.form = form.block.get('long-answer');
            this.valid = false;
            this.required = true;
            termEmail = new form.term({
              opset: 'string',
              op: 'email'
            });
            typeString = form.type.get('string');
            view = new ldView({
              root: root,
              initRender: false,
              action: {
                input: {
                  input: function(arg$){
                    var node;
                    node = arg$.node;
                    return validate();
                  }
                }
              },
              handler: {
                input: function(arg$){
                  var node;
                  node = arg$.node;
                },
                warn: function(arg$){
                  var node;
                  node = arg$.node;
                  node.innerText = typeString.isEmpty(view.get('input').value) ? "this field is required." : "this is not an email";
                  return node.style.display = !this$.valid ? 'block' : 'none';
                },
                pass: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.style.display = this$.valid ? 'block' : 'none';
                }
              }
            });
            validate = function(){
              var v, ref$;
              v = typeString.cast(view.get('input').value);
              this$.valid = termEmail.verify(v);
              ((ref$ = parent.lc).term || (ref$.term = [])).map(function(it){
                if (!~v.indexOf(it)) {
                  return this$.valid = false;
                }
              });
              return view.render();
            };
            view.render();
            return pubsub.on('add-term', function(){
              validate();
              return view.render();
            });
          }
        };
      }
    }
  });
  form.init = proxise(function(){
    return bm.init().then(function(){
      return bm.set(cr);
    }).then(function(){
      return bm.set(c);
    });
  });
  form.block.register('long-answer', longAnswer = function(){
    return this;
  });
  longAnswer.id = 'long-answer';
  longAnswer.prototype = import$(import$(Object.create(Object.prototype), form.block.prototype), {
    attributes: function(){},
    serialize: function(){},
    deserialize: function(){},
    toString: function(){},
    parse: function(){}
  });
  form.type.register({
    name: 'string',
    id: 'string',
    opset: 'string',
    cast: function(v){
      if (v != null) {
        return v + "";
      } else {
        return "";
      }
    },
    isEmpty: function(v){
      return !(v != null) || !v.length;
    }
  });
  form.opset.register({
    name: 'string',
    id: 'string',
    defaultOp: 'include',
    ops: {
      include: {
        config: {
          i: 'some text'
        },
        func: function(arg$){
          var v, c;
          v = arg$.v, c = arg$.c;
          return !!~v.indexOf(c.config.i);
        }
      },
      exclude: {
        config: {
          i: 'some text'
        },
        func: function(arg$){
          var v, c;
          v = arg$.v, c = arg$.c;
          return !~v.indexOf(c.config.i);
        }
      },
      email: function(arg$){
        var v, c;
        v = arg$.v, c = arg$.c;
        return curegex.get('email').exec(v);
      },
      url: function(arg$){
        var v, c;
        v = arg$.v, c = arg$.c;
        return curegex.get('url').exec(v);
      }
    }
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
