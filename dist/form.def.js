// Generated by LiveScript 1.6.0
(function(){
  var form, mgr;
  form = function(opt){
    opt == null && (opt = {});
    return this;
  };
  form.prototype = Object.create(Object.prototype);
  form.manager = function(){};
  form.manager.prototype = Object.create(Object.prototype);
  mgr = new form.manager();
  form.block = function(opt){
    opt == null && (opt = {});
    return this;
  };
  form.block.prototype = Object.create(Object.prototype);
  form.block.register = function(it){
    return (this.list || (this.list = [])).push(new form.block(it));
  };
  form.block.get = function(id){
    return (this.list || (this.list = [])).filter(function(it){
      return (it.id || it.name) === id;
    })[0];
  };
  form.type = function(opt){
    opt == null && (opt = {});
    this.name = opt.name;
    this.id = opt.id;
    this.cast = opt.cast instanceof Function
      ? opt.cast
      : function(it){
        return it;
      };
    this.opset = opt.opset instanceof form.opset
      ? opt.opset
      : typeof opt.opset === 'object'
        ? new form.opset(opt.opset)
        : form.opset.get(opt.opset);
    return this;
  };
  form.type.prototype = Object.create(Object.prototype);
  form.type.register = function(it){
    return (this.list || (this.list = [])).push(new form.type(it));
  };
  form.type.get = function(id){
    return (this.list || (this.list = [])).filter(function(it){
      return (it.id || it.name) === id;
    })[0];
  };
  form.opset = function(opt){
    var k, ref$, v, ref1$;
    opt == null && (opt = {});
    this.name = opt.name;
    this.id = opt.id;
    this.ops = {};
    for (k in ref$ = opt.ops) {
      v = ref$[k];
      this.ops[k] = new form.op((ref1$ = typeof v === 'function' ? {
        func: v
      } : v, ref1$.name = k, ref1$.id = k, ref1$));
    }
    this.defaultOp = this.ops[opt.defaultOp]
      ? opt.defaultOp
      : (function(){
        var ref$, results$ = [];
        for (k in ref$ = this.ops) {
          v = ref$[k];
          results$.push(k);
        }
        return results$;
      }.call(this))[0];
    return this;
  };
  form.opset.prototype = import$(Object.create(Object.prototype), {
    getOp: function(id){
      return this.ops[id || this.defaultOp];
    }
  });
  form.opset.register = function(it){
    return (this.list || (this.list = [])).push(new form.opset(it));
  };
  form.opset.get = function(id){
    return (this.list || (this.list = [])).filter(function(it){
      return (it.id || it.name) === id;
    })[0];
  };
  form.op = function(opt){
    opt == null && (opt = {});
    this.id = opt.id;
    this.name = opt.name;
    this.config = opt.config;
    this.args = opt.args;
    this.func = opt.func;
    return this;
  };
  form.op.prototype = import$(Object.create(Object.prototype), {
    getConfig: function(){
      return this.config || {};
    },
    verify: function(params){
      return !!this.func(params);
    }
  });
  /**
   * term, for verification of values based on assigned op and config.
   * @constructor
   * @param {boolean} enabled - determine if this term is enabled or not
   * @param {string} opset - id of opset used by this term.
   * @param {string} op - id of op used by this term
   * @param {object} config - additional config for chosen op.
   */
  form.term = function(opt){
    var that;
    opt == null && (opt = {});
    import$((this.enabled = true, this.opset = null, this.op = null, this.config = {}, this), opt);
    if (that = opt.opset) {
      this.setOpset(that);
    }
    if (that = opt.op) {
      this.setOp(that);
    }
    if (that = opt.config) {
      this.setConfig(that);
    }
    return this;
  };
  form.term.prototype = import$(Object.create(Object.prototype), {
    toggle: function(it){
      return this.enabled = it != null
        ? it
        : !this.enabled;
    },
    setOpset: function(id){
      if (!(this.opset = form.opset.get(id))) {
        throw new Error("no such opset '" + id + "'");
      }
      return this.setOp();
    },
    setOp: function(id){
      if (!this.opset) {
        throw new Error("opset not set");
      }
      if (!(this.op = this.opset.getOp(id))) {
        throw new Error("no such op '" + id + "'");
      }
      return this.setConfig();
    },
    setConfig: function(cfg){
      if (!this.op) {
        throw new Error("op not set");
      }
      return this.config = !cfg ? this.op.getConfig() : cfg;
    },
    verify: function(v){
      if (!this.op) {
        throw new Error("op not set");
      }
      return this.op.verify({
        v: v,
        c: this.config
      });
    }
  });
  window.form = form;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
